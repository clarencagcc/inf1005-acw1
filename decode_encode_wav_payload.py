import wave
from decode_encode_png import png_encode, png_decode
from decode_encode_wav import wav_encode, wav_decode
from decode_encode_mkv import mkv_encode, mkv_decode

def isWavPayload(plaintext: str):
    # Check if the string data is for a wave file
    data = plaintext.split('-')

    print(plaintext[:100])
    # WAV data is stored as "WAV-param,param,param-data,data,data,...
    # splitting by hyphen should always give 3 separate strings
    print(len(data))
    if len(data) != 3:
        return False

    print(data[0])
    # If the first string is not "WAV", then we know there won't be any wav data afterward
    if data[0] != "WAV":
        return False

    # params will be written as "param,param,param"
    # splitting this should net us 3 separate values
    params = data[1].split(',')
    print(data[1])
    if len(params) != 3:
        return False

    return True

class WAVPayload:
    n_channels: int
    sample_width: int
    frame_rate: int
    frames: list

    def __init__(self, n_channels: int, sample_width: int, frame_rate: int, frames: list):
        self.n_channels = n_channels
        self.sample_width = sample_width
        self.frame_rate = frame_rate
        self.frames = frames

    def convertToPayload(self):
        """
        Takes the saved audio data and converts it into a string payload that will be used during encoding.
        """
        output = []
        # String that identifies this data as a wav file
        output.extend("WAV-")
        # String that gives important data for writing the
        output.extend(f"{self.n_channels},{self.sample_width},{self.frame_rate}-")
        lastByte = ""
        for frame in self.frames:
            lastByte = f"{frame},"
            output.extend(lastByte)
        # Remove the final comma from the written data (this is so when we split the sound data later, there won't be an 'empty' member.
        output[-1] = lastByte[:-1]
        output = "".join(output)
        return output

    @staticmethod
    def readFromPath(file_path: str):
        """
        Creates a WAVPayload object from the provided filepath
        """
        with wave.open(file_path, 'rb') as wav_file:
            n_channels, sampwidth, framerate, n_frames, _, _ = wav_file.getparams()
            frames = list(wav_file.readframes(n_frames))
            return WAVPayload(n_channels, sampwidth, framerate, frames)

    @staticmethod
    def readFromString(string: str, output_path: str):
        """
        Reads a string and generates a wav file from it.
        :param string: This is what was generated by convertToPayload().
        :param output_path: Location to save to.
        """
        # Check if the string data is for a wave file
        if not isWavPayload(string):
            return

        data = string.split('-')
        # Get parameters
        parameters = data[1].split(",")
        n_channels = int(parameters[0])
        sample_width = int(parameters[1])
        frame_rate = int(parameters[2])

        # Get byte data from the list
        bytes_list_string = data[2].split(",")
        bytes_list_int = list(map(int, bytes_list_string))

        with wave.open(output_path, 'wb') as wav_file:
            wav_file.setnchannels(n_channels)
            wav_file.setsampwidth(sample_width)
            wav_file.setframerate(frame_rate)
            wav_file.writeframes(bytes(bytes_list_int))


# Sample code for encoding and decoding
if __name__ == "__main__":
    audio_path = "input/wav_short.wav"
    decoded_song_path = "output/wav_short.wav"

    # Load WAV data and convert that data into the string that will become the payload
    audio_data = WAVPayload.readFromPath(audio_path)
    payload_string = audio_data.convertToPayload()

    test = "PNG"
    decoded_string = ""

    if test == "PNG":
        image_path = "input/excision.png"
        encoded_path = "output/excision.png"
        # Encode the generated string into the png
        encoded_image = png_encode(image_path, payload_string, lsb_bits=5)
        encoded_image.save(encoded_path)
        # Decode the encoded image
        decoded_string = png_decode(encoded_path, lsb_bits=5)
        # Convert the decoded string into a wave file
        WAVPayload.readFromString(decoded_string, decoded_song_path)

    elif test == "WAV":
        input_path = "input/wav_long.wav"
        encoded_path = "output/wav_long.wav"
        # Encode the generated string into the wav
        encoded_wav = wav_encode(input_path, payload_string, encoded_path, bit_depth=5)
        # Decode the Encoded WAV File
        decoded_string = wav_decode(encoded_path, bit_depth=5)
        # Convert the decoded string into a wave file
        WAVPayload.readFromString(decoded_string, decoded_song_path)

    elif test == "MKV":
        input_path = "input/mkv_medium.mkv"
        encoded_path = "output/mkv_medium.mkv"
        # Encode The generated string into the MKV
        encoded_mkv = mkv_encode(input_path, encoded_path, payload_string, lsb_bits=5)
        # Decode the encoded MKV file
        decoded_string = mkv_decode(encoded_path, lsb_bits=5)
        # Convert the decoded string into a wave file
        WAVPayload.readFromString(decoded_string, decoded_song_path)

